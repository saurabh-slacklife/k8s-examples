apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: deploy-py-protobuf-rest-api
    docker-repository: saurabhsa
    tier: backend
    type: API
    sub-type: REST
    environment: development
  name: py-proto
#  namespace: py-proto
spec:
  replicas: 2
  selector:
    matchLabels:
      app: py-protobuf-rest-api
      tier: backend
      type: API
      sub-type: REST
      environment: development
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: py-protobuf-rest-api
        tier: backend
        type: API
        sub-type: REST
        environment: development
        image: py-protobuf-example
    spec:
     # nodeName: minikube
    #  nodeSelector:
     #   name: saurabh
      volumes:
        - name: py-proto-volume
          persistentVolumeClaim:
            claimName: volume-claim-py-proto 
      containers:
      - name: py-protobuf-example
        image: saurabhsa/py-protobuf-example:latest
        imagePullPolicy: IfNotPresent
        resources: {}
        ports:
        - containerPort: 5000
          name: app-port
        envFrom:
        - configMapRef:
            name: cfg-py-proto 
        resources:
          limits:
            memory: 100M
            cpu: 0.1
          requests:
            memory: 100M
            cpu: 0.1
        volumeMounts:
          - mountPath: "/var/log/proto/"
            name: py-proto-volume
        livenessProbe:
          httpGet:
            path: /health/
            port: app-port 
            scheme: HTTP
          periodSeconds: 10
          initialDelaySeconds: 45
          successThreshold: 1
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health/datastore/
            port: app-port
            scheme: HTTP
          timeoutSeconds: 10
          initialDelaySeconds: 10
          failureThreshold: 2
          periodSeconds: 10
status: {}
